

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_100 = Integer(100); _sage_const_1 = Integer(1); _sage_const_32 = Integer(32); _sage_const_2 = Integer(2); _sage_const_16 = Integer(16); _sage_const_8 = Integer(8)
import random

def enc(ct):
    random.seed(int(_sage_const_0 ))
    for _ in range(_sage_const_100 ):
        ct ^= ct>>random.randint(_sage_const_1 ,_sage_const_32 )
    return ct

def tovec(x,n):
    return vector(GF(_sage_const_2 ),[(x>>i)&_sage_const_1  for i in range(n)])

def toint(v,n):
    return sum(_sage_const_2 **e for i,e in zip(v,range(n)) if i)

ct = b'n\xb2t"l(cWp\x8c\x83\xb3\xc5\xee\x98T\x0e\xceI&\x83\xe9ZZ7uvFf\x88\xdcz'
ct = int(ct.hex(),_sage_const_16 )
n = _sage_const_32 *_sage_const_8 
M = Matrix([tovec(enc(_sage_const_2 **i),n) for i in range(n)])**-_sage_const_1 
pt = tovec(ct,n)*M
print(bytes.fromhex(toint(pt,n).hex()))

